{"version":3,"sources":["store/inputsReducer.ts","database/database.ts","components/DataInputs/TextInput/TextInput.tsx","components/DataInputs/DataInputs.tsx","components/DataTable/Today/Today.tsx","components/DataTable/TableValueItem/TableValueItem.tsx","components/DataTable/AllDays/AllDays.tsx","components/DataTable/DataTable.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/DataTable/DataTable.module.css","App.module.css","components/DataInputs/DataInputs.module.css","components/DataInputs/TextInput/TextInput.module.css"],"names":["Actions","now","moment","format","initialState","transactions","addIncomes","value","day","type","ADD_INCOMES","addOutcomes","ADD_OUTCOMES","db","version","stores","this","where","equals","toArray","Dexie","TextInput","props","useState","setValue","date","setDate","onValueAdd","newItem","id","v1","addDate","add","className","s","textInput","TextField","variant","onChange","e","Number","currentTarget","onKeyPress","key","Button","color","onClick","datePick","DataInputs","main","incomeValue","addValue","outcomeValue","Today","incomes","useLiveQuery","table","outcomes","incomesSum","filter","inc","reduce","acc","cur","outcomesSum","out","diff","Card","raised","outputCard","cardTitle","cardValue","TableValueItem","editMode","setEditMode","onEditOff","onSetValue","onBlur","autoFocus","onDoubleClick","AllDays","slice","lastIndexOf","tablePage","setTablePage","rowsPerPage","setRowsPerPage","startsWith","emptyRows","Math","max","length","tr","newValue","update","TableContainer","component","Paper","style","backgroundColor","Table","minWidth","TableHead","TableRow","TableCell","TableBody","map","row","delete","height","colSpan","TablePagination","count","rowsPerPageOptions","label","page","onPageChange","newPage","onRowsPerPageChange","parseInt","target","DataTable","navbar","to","exact","navLink","activeClassName","activeLink","elevation","outputs","path","render","App","app","title","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","inputsReducer","state","action","newIncome","newOutcome","store","createStore","ReactDOM","StrictMode","basename","process","document","getElementById","module","exports"],"mappings":"2GAIYA,E,yKAAAA,K,0BAAAA,E,6BAAAA,M,KAeL,IAAMC,EAAMC,MAASC,OAAO,cAE7BC,EAAiC,CACnCC,aAAc,IAkBLC,EAAa,SAACC,EAAeC,GACtC,MAAO,CACHC,KAAMT,EAAQU,YACdF,MACAD,UAGKI,EAAc,SAACJ,EAAeC,GACvC,MAAO,CACHC,KAAMT,EAAQY,aACdJ,MACAD,U,gCC3BKM,EAAK,I,kDAXd,aAAe,IAAD,8BACV,cAAM,iBAHVR,kBAEc,EAEV,EAAKS,QAAQ,GAAGC,OAAO,CACnBV,aAAc,6BAHR,E,2CAMd,WACI,OAAOW,KAAKX,aAAaY,MAAM,WAAWC,OAAOjB,GAAKkB,c,SAVvCC,U,OC+CRC,EA3CG,SAACC,GAAsB,IAAD,EAEVC,mBAAiB,GAFP,mBAE7BhB,EAF6B,KAEtBiB,EAFsB,OAGZD,mBAAiBtB,GAHL,mBAG7BwB,EAH6B,KAGvBC,EAHuB,KAQ9BC,EAAa,WACf,GAAIpB,EAAO,CACP,IAAMqB,EAAU,CAACC,GAAIC,cAAMrB,KAAMa,EAAMb,KAAMF,MAAOA,EAAOwB,QAASN,GACpEZ,EAAGR,aAAa2B,IAAIJ,GACpBJ,EAAS,KASjB,OACI,sBAAKS,UAAWC,IAAEC,UAAlB,UACI,cAACC,EAAA,EAAD,CACIC,QAAQ,WACRC,SApBU,SAACC,GACnBC,OAAOD,EAAEE,cAAclC,OAASiB,GAAUe,EAAEE,cAAclC,OAASiB,EAAS,IAoBpEjB,MAAOA,EACPmC,WAZS,SAACH,GACJ,UAAVA,EAAEI,KACFhB,OAYA,cAACiB,EAAA,EAAD,CACIP,QAAQ,YACRQ,MAAM,UACNC,QAASnB,EAHb,8DAMA,sBAAKM,UAAWC,IAAEa,SAAlB,UACI,+FACA,uBAAOtC,KAAK,OAAOF,MAAOkB,EAAMa,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEE,cAAclC,iBC9B1EyC,EAhBI,WAEf,OACI,uBAAMf,UAAWC,IAAEe,KAAnB,UACI,0BAAShB,UAAWC,IAAEgB,YAAtB,UACI,sEACA,cAAC,EAAD,CAAWC,SAAU7C,EAAYG,KAAM,cAE3C,0BAASwB,UAAWC,IAAEkB,aAAtB,UACI,4EACA,cAAC,EAAD,CAAWD,SAAUxC,EAAaF,KAAM,mB,2DCgDzC4C,EAxDD,WAEV,IAAMC,EAAUC,wBACZ,kBAAM1C,EACD2C,MAAM,gBACNvC,MAAM,QACNC,OAAO,UACPC,aAEHsC,EAAWF,wBACb,kBAAM1C,EACD2C,MAAM,gBACNvC,MAAM,QACNC,OAAO,WACPC,aAET,IAAKmC,IAAYG,EAAU,OAAO,KAElC,IAAMC,EAAaJ,EAAQK,QAAO,SAAAC,GAAG,OAAIA,EAAI7B,UAAY9B,KAAK4D,QAAO,SAACC,EAAKC,GACvE,OAAOD,EAAMC,EAAIxD,QAClB,GACGyD,EAAcP,EAASE,QAAO,SAAAM,GAAG,OAAIA,EAAIlC,UAAY9B,KAAK4D,QAAO,SAACC,EAAKC,GACzE,OAAOD,EAAMC,EAAIxD,QAClB,GACG2D,EAAOR,EAAaM,EAE1B,OACI,qCACI,eAACG,EAAA,EAAD,CAAMC,QAAM,EAACnC,UAAWC,IAAEmC,WAA1B,UACI,oBAAIpC,UAAWC,IAAEoC,UAAjB,yGAGA,qBAAKrC,UAAWC,IAAEqC,UAAlB,SACKb,OAGT,eAACS,EAAA,EAAD,CAAMC,QAAM,EAACnC,UAAWC,IAAEmC,WAA1B,UACI,oBAAIpC,UAAWC,IAAEoC,UAAjB,mGAGA,qBAAKrC,UAAWC,IAAEqC,UAAlB,SACKP,OAGT,eAACG,EAAA,EAAD,CAAMC,QAAM,EAACnC,UAAWC,IAAEmC,WAA1B,UACI,oBAAIpC,UAAWC,IAAEoC,UAAjB,wDAGA,qBAAKrC,UAAWC,IAAEqC,UAAlB,SACKL,W,+DCZNM,EApCQ,SAAClD,GAAsB,IAAD,EAETC,oBAAkB,GAFT,mBAElCkD,EAFkC,KAExBC,EAFwB,OAGfnD,mBAAiBD,EAAMf,OAHR,mBAGlCA,EAHkC,KAG3BiB,EAH2B,KAQnCmD,EAAY,WACdrD,EAAMsD,WAAWtD,EAAMO,GAAItB,GAC3BmE,GAAY,IAShB,OACI,8BACKD,EACK,uBACEhE,KAAK,OACLF,MAAOA,EACP+B,SAba,SAACC,GAC1Bf,GAAUe,EAAEE,cAAclC,QAadsE,OAAQF,EACRjC,WAZK,SAACH,GACR,UAAVA,EAAEI,KAAmBgC,KAYTG,WAAS,IAEX,sBAAMC,cAzBH,WACbL,GAAY,IAwBF,SAAgCnE,OC4EnCyE,EAlGC,WAAO,IAAD,EAEMzD,mBAAiBtB,EAAIgF,MAAM,EAAGhF,EAAIiF,YAAY,OAFpD,mBAEXzD,EAFW,KAELC,EAFK,OAGgBH,mBAAiB,GAHjC,mBAGX4D,EAHW,KAGAC,EAHA,OAIoB7D,mBAAiB,IAJrC,mBAIX8D,EAJW,KAIEC,EAJF,KAMZjF,EAAekD,wBACjB,kBAAM1C,EACD2C,MAAM,gBACNvC,MAAM,WAAWsE,WAAW9D,GAC5BN,YACL,CAACM,IACL,IAAKpB,EAAc,OAAO,KAE1B,IAAMmF,EAAYL,EAAY,EAAIM,KAAKC,IAAI,GAAI,EAAIP,GAAaE,GAAlB,OAAgChF,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAcsF,SAAU,EAQhGzB,EANa7D,EAAasD,QAAO,SAAAiC,GAAE,MAAgB,WAAZA,EAAGnF,QAAmBoD,QAAO,SAACC,EAAKC,GAC5E,OAAOD,EAAMC,EAAIxD,QAClB,GACiBF,EAAasD,QAAO,SAAAiC,GAAE,MAAgB,YAAZA,EAAGnF,QAAoBoD,QAAO,SAACC,EAAKC,GAC9E,OAAOD,EAAMC,EAAIxD,QAClB,GAaGqE,EAAa,SAAC/C,EAAYgE,GAC5BhF,EAAG2C,MAAM,gBAAgBsC,OAAOjE,EAAI,CAACtB,MAAOsF,KAGhD,OACI,qCACI,gCACI,wGACA,uBAAOpF,KAAK,QAAQF,MAAOkB,EAAMa,SAAU,SAAAC,GAAC,OAAIb,EAAQa,EAAEE,cAAclC,aAE5E,cAACwF,EAAA,EAAD,CAAgBC,UAAWC,IAAOC,MAAO,CAACC,gBAAiB,aAA3D,SACI,eAACC,EAAA,EAAD,CAAOF,MAAO,CAACG,SAAU,KAAzB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,4FACA,cAACA,EAAA,EAAD,kFACA,cAACA,EAAA,EAAD,+DACA,cAACA,EAAA,EAAD,8DAGR,eAACC,EAAA,EAAD,YAEMpB,EAAc,EACNhF,EAAa4E,MAAME,EAAYE,EAAaF,EAAYE,EAAcA,GACtEhF,GACRqG,KAAI,SAAAC,GAAG,OACL,eAACJ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACKG,EAAI5E,UAET,cAACyE,EAAA,EAAD,UACkB,WAAbG,EAAIlG,KAAoB,iCAAU,yCAEvC,cAAC+F,EAAA,EAAD,UACI,cAAC,EAAD,CAAgBjG,MAAOoG,EAAIpG,MAAOqE,WAAYA,EAAY/C,GAAI8E,EAAI9E,OAEtE,cAAC2E,EAAA,EAAD,UACI,wBAAQ1D,QAAS,kBAxCpBjB,EAwC8C8E,EAAI9E,QAvC3EhB,EAAG2C,MAAM,gBAAgBoD,OAAO/E,GADR,IAACA,GAwCG,mBAXO8E,EAAI9E,OAgBtB2D,EAAY,GACT,cAACe,EAAA,EAAD,CAAUL,MAAO,CAACW,OAAQ,GAAKrB,GAA/B,SACI,cAACgB,EAAA,EAAD,CAAWM,QAAS,cAMxC,cAACC,EAAA,EAAD,CACIf,UAAW,MACXgB,MAAO3G,EAAasF,OACpBN,YAAaA,EACb4B,mBAAoB,CAAC,EAAG,GAAI,CAACC,MAAO,MAAO3G,OAAQ,IACnD4G,KAAMhC,EACNiC,aAlEc,SAAC7E,EAA+C8E,GACtEjC,EAAaiC,IAkELC,oBAhEgB,SAAC/E,GACzB+C,EAAeiC,SAAShF,EAAEiF,OAAOjH,MAAO,KACxC6E,EAAa,MAgET,2JAA+BlB,SCtF5BuD,EAhBG,WAEd,OACI,sBAAKxF,UAAWC,IAAEsB,MAAlB,UACI,sBAAKvB,UAAWC,IAAEwF,OAAlB,UACI,cAAC,IAAD,CAASC,GAAI,IAAKC,OAAK,EAAC3F,UAAWC,IAAE2F,QAASC,gBAAiB5F,IAAE6F,WAAjE,wDACA,cAAC,IAAD,CAASJ,GAAI,OAAQ1F,UAAWC,IAAE2F,QAASC,gBAAiB5F,IAAE6F,WAA9D,sDAEJ,eAAC9B,EAAA,EAAD,CAAO+B,UAAW,EAAG/F,UAAWC,IAAE+F,QAAS/B,MAAO,CAACC,gBAAiB,aAApE,UACI,cAAC,IAAD,CAAO+B,KAAM,IAAKN,OAAK,EAACO,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAM,OAAQN,OAAK,EAACO,OAAQ,kBAAM,cAAC,EAAD,cCA1CC,EAZH,WACR,OACI,sBAAKnG,UAAWC,IAAEmG,IAAlB,UACI,oBAAIpG,UAAWC,IAAEoG,MAAjB,kDACA,sBAAKrG,UAAWC,IAAEqG,UAAlB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,WCGDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCJRQ,GAAcC,aAAgB,CAChCC,cVmByB,WAAoF,IAAnFC,EAAkF,uDAAxDhJ,EAAciJ,EAA0C,uCAC5G,OAAQA,EAAO5I,MAEX,KAAKT,EAAQU,YACT,IAAM4I,EAA0B,CAACzH,GAAIC,cAAMrB,KAAM,SAAUF,MAAO8I,EAAO9I,MAAOwB,QAASsH,EAAO7I,KAChG,OAAO,2BAAI4I,GAAX,IAAkB/I,aAAa,GAAD,mBAAM+I,EAAM/I,cAAZ,CAA0BiJ,MAE5D,KAAKtJ,EAAQY,aACT,IAAM2I,EAA2B,CAAC1H,GAAIC,cAAMrB,KAAM,UAAWF,MAAO8I,EAAO9I,MAAOwB,QAASsH,EAAO7I,KAClG,OAAO,2BAAI4I,GAAX,IAAkB/I,aAAa,GAAD,mBAAM+I,EAAM/I,cAAZ,CAA0BkJ,MAE5D,QACI,OAAOH,MU5BNI,GAAQC,aAAYR,ICAjCS,IAASvB,OACL,cAAC,IAAMwB,WAAP,UACI,cAAC,KAAD,CAAUH,MAAOA,GAAjB,SACI,cAAC,IAAD,CAAYI,SAAUC,sBAAtB,SACI,cAAC,EAAD,UAIZC,SAASC,eAAe,SAM5BvB,K,mBCtBAwB,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,OAAS,0BAA0B,QAAU,2BAA2B,WAAa,8BAA8B,WAAa,8BAA8B,QAAU,6B,mBCA3ND,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,UAAY,yB,mBCAhFD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,QAAU,4BAA4B,SAAW,+B,mBCAnGD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,SAAW,8B","file":"static/js/main.9fcd29ff.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport {ITransaction} from \"../database/database\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport enum Actions {\r\n    ADD_INCOMES = 'ADD_INCOMES',\r\n    ADD_OUTCOMES = 'ADD_OUTCOMES',\r\n}\r\n\r\ntype AddIncomesActionType = ReturnType<typeof addIncomes>\r\ntype AddOutcomesActionType = ReturnType<typeof addOutcomes>\r\nexport type ActionsType =\r\n    AddIncomesActionType\r\n    | AddOutcomesActionType\r\n\r\ntype InitialStateType = {\r\n    transactions: Array<ITransaction>\r\n}\r\n\r\nexport const now = moment().format('YYYY-MM-DD')\r\n\r\nconst initialState: InitialStateType = {\r\n    transactions: []\r\n}\r\n\r\nexport const inputsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case Actions.ADD_INCOMES:\r\n            const newIncome: ITransaction = {id: v1(), type: 'income', value: action.value, addDate: action.day}\r\n            return {...state, transactions: [...state.transactions, newIncome]}\r\n\r\n        case Actions.ADD_OUTCOMES:\r\n            const newOutcome: ITransaction = {id: v1(), type: 'outcome', value: action.value, addDate: action.day}\r\n            return {...state, transactions: [...state.transactions, newOutcome]}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const addIncomes = (value: number, day: string) => {\r\n    return {\r\n        type: Actions.ADD_INCOMES,\r\n        day,\r\n        value,\r\n    } as const\r\n}\r\nexport const addOutcomes = (value: number, day: string) => {\r\n    return {\r\n        type: Actions.ADD_OUTCOMES,\r\n        day,\r\n        value,\r\n    } as const\r\n}","import Dexie from \"dexie\";\r\nimport {now} from \"../store/inputsReducer\";\r\n\r\nexport interface ITransaction {\r\n    id: string\r\n    type: 'income' | 'outcome'\r\n    value: number\r\n    addDate: string\r\n}\r\n\r\nclass MoneysDB extends Dexie {\r\n    transactions!: Dexie.Table<ITransaction, string>;\r\n\r\n    constructor() {\r\n        super('MoneyManager')\r\n        this.version(1).stores({\r\n            transactions: 'id, type, value, addDate'\r\n        })\r\n    }\r\n    getData() {\r\n        return this.transactions.where('addDate').equals(now).toArray()\r\n    }\r\n}\r\n\r\nexport const db = new MoneysDB()\r\n\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport s from './TextInput.module.css'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType, now} from \"../../../store/inputsReducer\";\r\nimport {db} from \"../../../database/database\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype PropsType = {\r\n    addValue: (value: number, day: string) => ActionsType\r\n    type: 'income' | 'outcome'\r\n}\r\n\r\nconst TextInput = (props: PropsType) => {\r\n\r\n    const [value, setValue] = useState<number>(0)\r\n    const [date, setDate] = useState<string>(now)\r\n\r\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        Number(e.currentTarget.value) ? setValue(+e.currentTarget.value) : setValue(0)\r\n    }\r\n    const onValueAdd = () => {\r\n        if (value) {\r\n            const newItem = {id: v1(), type: props.type, value: value, addDate: date}\r\n            db.transactions.add(newItem)\r\n            setValue(0)\r\n        }\r\n    }\r\n    const onEnterPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onValueAdd()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.textInput}>\r\n            <TextField\r\n                variant='outlined'\r\n                onChange={onValueChange}\r\n                value={value}\r\n                onKeyPress={onEnterPress}\r\n            />\r\n            <Button\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={onValueAdd}\r\n            >Добавить\r\n            </Button>\r\n            <div className={s.datePick}>\r\n                <h3>Выбери дату</h3>\r\n                <input type=\"date\" value={date} onChange={(e) => setDate(e.currentTarget.value)}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport s from './DataInputs.module.css'\r\nimport TextInput from \"./TextInput/TextInput\";\r\nimport {addIncomes, addOutcomes} from \"../../store/inputsReducer\";\r\n\r\nconst DataInputs = () => {\r\n\r\n    return (\r\n        <main className={s.main}>\r\n            <section className={s.incomeValue}>\r\n                <h3>Доходы</h3>\r\n                <TextInput addValue={addIncomes} type={'income'}/>\r\n            </section>\r\n            <section className={s.outcomeValue}>\r\n                <h3>Расходы</h3>\r\n                <TextInput addValue={addOutcomes} type={'outcome'}/>\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default DataInputs;","import React from 'react';\r\nimport {Card} from \"@material-ui/core\";\r\nimport s from \"../DataTable.module.css\";\r\nimport {db} from \"../../../database/database\";\r\nimport {useLiveQuery} from \"dexie-react-hooks\";\r\nimport {now} from \"../../../store/inputsReducer\";\r\n\r\nconst Today = () => {\r\n\r\n    const incomes = useLiveQuery(\r\n        () => db\r\n            .table('transactions')\r\n            .where('type')\r\n            .equals('income')\r\n            .toArray()\r\n    )\r\n    const outcomes = useLiveQuery(\r\n        () => db\r\n            .table('transactions')\r\n            .where('type')\r\n            .equals('outcome')\r\n            .toArray()\r\n    )\r\n    if (!incomes || !outcomes) return null\r\n\r\n    const incomesSum = incomes.filter(inc => inc.addDate === now).reduce((acc, cur) => {\r\n        return acc + cur.value\r\n    }, 0)\r\n    const outcomesSum = outcomes.filter(out => out.addDate === now).reduce((acc, cur) => {\r\n        return acc + cur.value\r\n    }, 0)\r\n    const diff = incomesSum - outcomesSum\r\n\r\n    return (\r\n        <>\r\n            <Card raised className={s.outputCard}>\r\n                <h3 className={s.cardTitle}>\r\n                    Всего заработано\r\n                </h3>\r\n                <div className={s.cardValue}>\r\n                    {incomesSum}\r\n                </div>\r\n            </Card>\r\n            <Card raised className={s.outputCard}>\r\n                <h3 className={s.cardTitle}>\r\n                    Всего потрачено\r\n                </h3>\r\n                <div className={s.cardValue}>\r\n                    {outcomesSum}\r\n                </div>\r\n            </Card>\r\n            <Card raised className={s.outputCard}>\r\n                <h3 className={s.cardTitle}>\r\n                    Прибыль\r\n                </h3>\r\n                <div className={s.cardValue}>\r\n                    {diff}\r\n                </div>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Today;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    value: number\r\n    id: string\r\n    onSetValue: (id: string, newValue: number) => void\r\n}\r\n\r\nconst TableValueItem = (props: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [value, setValue] = useState<number>(props.value)\r\n\r\n    const onEditOn = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onEditOff = () => {\r\n        props.onSetValue(props.id, value)\r\n        setEditMode(false)\r\n    }\r\n    const onValueChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(+e.currentTarget.value)\r\n    }\r\n    const onEnterPress = (e: KeyboardEvent) => {\r\n        e.key === 'Enter' && onEditOff()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={onValueChangeHandler}\r\n                    onBlur={onEditOff}\r\n                    onKeyPress={onEnterPress}\r\n                    autoFocus\r\n                />\r\n                : <span onDoubleClick={onEditOn}>{value}</span>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableValueItem;","import React, {ChangeEvent, useState} from 'react';\r\nimport {db} from \"../../../database/database\";\r\nimport {\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {now} from \"../../../store/inputsReducer\";\r\nimport {useLiveQuery} from \"dexie-react-hooks\";\r\nimport TableValueItem from \"../TableValueItem/TableValueItem\";\r\n\r\nconst AllDays = () => {\r\n\r\n    const [date, setDate] = useState<string>(now.slice(0, now.lastIndexOf('-')))\r\n    const [tablePage, setTablePage] = useState<number>(0)\r\n    const [rowsPerPage, setRowsPerPage] = useState<number>(10)\r\n\r\n    const transactions = useLiveQuery(\r\n        () => db\r\n            .table('transactions')\r\n            .where('addDate').startsWith(date)\r\n            .toArray(),\r\n        [date])\r\n    if (!transactions) return null\r\n\r\n    const emptyRows = tablePage > 0 ? Math.max(0, (1 + tablePage) * rowsPerPage - transactions?.length) : 0\r\n\r\n    const incomesSum = transactions.filter(tr => tr.type === 'income').reduce((acc, cur) => {\r\n        return acc + cur.value\r\n    }, 0)\r\n    const outcomesSum = transactions.filter(tr => tr.type === 'outcome').reduce((acc, cur) => {\r\n        return acc + cur.value\r\n    }, 0)\r\n    const diff = incomesSum - outcomesSum\r\n\r\n    const onChangeTablePage = (e: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        setTablePage(newPage)\r\n    }\r\n    const onChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setRowsPerPage(parseInt(e.target.value, 10))\r\n        setTablePage(0)\r\n    }\r\n    const onTransactionDelete = (id: string) => {\r\n        db.table('transactions').delete(id)\r\n    }\r\n    const onSetValue = (id: string, newValue: number) => {\r\n        db.table('transactions').update(id, {value: newValue})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>Выбери месяц </span>\r\n                <input type=\"month\" value={date} onChange={e => setDate(e.currentTarget.value)}/>\r\n            </div>\r\n            <TableContainer component={Paper} style={{backgroundColor: '#3f51b545'}}>\r\n                <Table style={{minWidth: 650}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>День (ГГГГ-ММ-ДД)</TableCell>\r\n                            <TableCell>Доход/расход</TableCell>\r\n                            <TableCell>Значение</TableCell>\r\n                            <TableCell>Удалить</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/*Counting number of transactions per table page when change page*/}\r\n                        {(rowsPerPage > 0\r\n                                ? transactions.slice(tablePage * rowsPerPage, tablePage * rowsPerPage + rowsPerPage)\r\n                                : transactions\r\n                        ).map(row => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell>\r\n                                    {row.addDate}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {row.type === 'income' ? 'Доход' : 'Расход'}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <TableValueItem value={row.value} onSetValue={onSetValue} id={row.id}/>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <button onClick={() => onTransactionDelete(row.id)}>X</button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        {/*Add empty rows on last page for not to jump height of table*/}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{height: 53 * emptyRows}}>\r\n                                <TableCell colSpan={6}/>\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                component={'div'}\r\n                count={transactions.length}\r\n                rowsPerPage={rowsPerPage}\r\n                rowsPerPageOptions={[5, 10, {label: 'All', value: -1}]}\r\n                page={tablePage}\r\n                onPageChange={onChangeTablePage}\r\n                onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n            <span>Всего прибыль за месяц: {diff}</span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AllDays;","import React from 'react';\r\nimport s from './DataTable.module.css'\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport Today from \"./Today/Today\";\r\nimport AllDays from \"./AllDays/AllDays\";\r\n\r\nconst DataTable = () => {\r\n\r\n    return (\r\n        <div className={s.table}>\r\n            <nav className={s.navbar}>\r\n                <NavLink to={'/'} exact className={s.navLink} activeClassName={s.activeLink}>Сегодня</NavLink>\r\n                <NavLink to={'/all'} className={s.navLink} activeClassName={s.activeLink}>Все дни</NavLink>\r\n            </nav>\r\n            <Paper elevation={8} className={s.outputs} style={{backgroundColor: '#3f51b545'}}>\r\n                <Route path={'/'} exact render={() => <Today/>}/>\r\n                <Route path={'/all'} exact render={() => <AllDays/>}/>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;","import React from 'react';\nimport s from './App.module.css'\nimport DataInputs from \"./components/DataInputs/DataInputs\";\nimport DataTable from \"./components/DataTable/DataTable\";\n\nconst App = () => {\n    return (\n        <div className={s.app}>\n            <h1 className={s.title}>Лавэха</h1>\n            <div className={s.container}>\n                <DataInputs/>\n                <DataTable/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {inputsReducer} from \"./inputsReducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof store.getState>\r\n\r\nconst rootReducer = combineReducers({\r\n    inputsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"DataTable_table__3m1oN\",\"navbar\":\"DataTable_navbar__1-cRz\",\"navLink\":\"DataTable_navLink__2BwaU\",\"activeLink\":\"DataTable_activeLink__W5e4v\",\"outputCard\":\"DataTable_outputCard__3VbvJ\",\"outputs\":\"DataTable_outputs__2Mzbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2sPq6\",\"title\":\"App_title__G5e3L\",\"container\":\"App_container__1m9xk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"DataInputs_main__1611N\",\"incomes\":\"DataInputs_incomes__11UGi\",\"outcomes\":\"DataInputs_outcomes__fq2fD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"TextInput_textInput__LPbGB\",\"datePick\":\"TextInput_datePick__2aI7b\"};"],"sourceRoot":""}